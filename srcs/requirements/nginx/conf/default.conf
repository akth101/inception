##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
    # 443포트에서 ssl로 암호화된 연결을 받겠다는 뜻(Ipv4 & Ipv6)
	listen 443 ssl;
	listen [::]:443 ssl;


	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

    # ssl 암호화에 사용할 인증서(.crt)와 개인키(.key) 위치 설정
    ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
	ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

    #T1.2와 1.3버전만 사용하도록 제한
	ssl_protocols TLSv1.2 TLSv1.3;
	# Add index.php to the list if you are using PHP


    # 웹 서버의 루트 디렉토리 설정(이 디렉토리 안에 있는 파일들이 웹에서 접근 가능)
	root /var/www/html;
    # 웹 서버의 루트 디렉토리 안에 있는 파일들을 찾을 때 우선순위 설정
    # 예를 들어 index.php가 있으면 그걸 제공하고 없으면 그 다음 또 그 다음을 제공
	index index.php index.html index.nginx-debian.html;

	server_name seongjko.42.fr;

    # NGINX가 클라이언트 요청을 처리할 때 파일을 찾는 방법을 정의
	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server ->PHP 파일을 wordpress 컨테이너로 토스하기 위함
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
	
		# With php-fpm (or other unix sockets):
		# fastcgi_pass unix:/run/php/php7.4-fpm.sock;
		# With php-cgi (or other tcp sockets):

        # PHP 요청을 WordPress 컨테이너의 9000번 포트로 전달
		fastcgi_pass wordpress:9000;

        # PHP 스크립트의 전체 경로를 php-fpm에 전달
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
